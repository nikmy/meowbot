// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_test.go
//
// Generated by this command:
//
//	mockgen -source=interfaces_test.go -destination=interfaces_mocks_test.go -package=telegram
//

// Package telegram is a generated GoMock package.
package telegram

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/nikmy/meowbot/internal/repo/models"
	logger "github.com/nikmy/meowbot/pkg/logger"
	txn "github.com/nikmy/meowbot/pkg/txn"
	fsm "github.com/vitaliy-ukiru/fsm-telebot"
	gomock "go.uber.org/mock/gomock"
	telebot "gopkg.in/telebot.v3"
)

// MocktelebotContext is a mock of telebotContext interface.
type MocktelebotContext struct {
	ctrl     *gomock.Controller
	recorder *MocktelebotContextMockRecorder
}

// MocktelebotContextMockRecorder is the mock recorder for MocktelebotContext.
type MocktelebotContextMockRecorder struct {
	mock *MocktelebotContext
}

// NewMocktelebotContext creates a new mock instance.
func NewMocktelebotContext(ctrl *gomock.Controller) *MocktelebotContext {
	mock := &MocktelebotContext{ctrl: ctrl}
	mock.recorder = &MocktelebotContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktelebotContext) EXPECT() *MocktelebotContextMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MocktelebotContext) Accept(errorMessage ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range errorMessage {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MocktelebotContextMockRecorder) Accept(errorMessage ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MocktelebotContext)(nil).Accept), errorMessage...)
}

// Answer mocks base method.
func (m *MocktelebotContext) Answer(resp *telebot.QueryResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Answer", resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Answer indicates an expected call of Answer.
func (mr *MocktelebotContextMockRecorder) Answer(resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MocktelebotContext)(nil).Answer), resp)
}

// Args mocks base method.
func (m *MocktelebotContext) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MocktelebotContextMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MocktelebotContext)(nil).Args))
}

// Bot mocks base method.
func (m *MocktelebotContext) Bot() *telebot.Bot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bot")
	ret0, _ := ret[0].(*telebot.Bot)
	return ret0
}

// Bot indicates an expected call of Bot.
func (mr *MocktelebotContextMockRecorder) Bot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bot", reflect.TypeOf((*MocktelebotContext)(nil).Bot))
}

// Callback mocks base method.
func (m *MocktelebotContext) Callback() *telebot.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback")
	ret0, _ := ret[0].(*telebot.Callback)
	return ret0
}

// Callback indicates an expected call of Callback.
func (mr *MocktelebotContextMockRecorder) Callback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MocktelebotContext)(nil).Callback))
}

// Chat mocks base method.
func (m *MocktelebotContext) Chat() *telebot.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(*telebot.Chat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MocktelebotContextMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MocktelebotContext)(nil).Chat))
}

// ChatJoinRequest mocks base method.
func (m *MocktelebotContext) ChatJoinRequest() *telebot.ChatJoinRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatJoinRequest")
	ret0, _ := ret[0].(*telebot.ChatJoinRequest)
	return ret0
}

// ChatJoinRequest indicates an expected call of ChatJoinRequest.
func (mr *MocktelebotContextMockRecorder) ChatJoinRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatJoinRequest", reflect.TypeOf((*MocktelebotContext)(nil).ChatJoinRequest))
}

// ChatMember mocks base method.
func (m *MocktelebotContext) ChatMember() *telebot.ChatMemberUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMember")
	ret0, _ := ret[0].(*telebot.ChatMemberUpdate)
	return ret0
}

// ChatMember indicates an expected call of ChatMember.
func (mr *MocktelebotContextMockRecorder) ChatMember() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMember", reflect.TypeOf((*MocktelebotContext)(nil).ChatMember))
}

// Data mocks base method.
func (m *MocktelebotContext) Data() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(string)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MocktelebotContextMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MocktelebotContext)(nil).Data))
}

// Delete mocks base method.
func (m *MocktelebotContext) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MocktelebotContextMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocktelebotContext)(nil).Delete))
}

// DeleteAfter mocks base method.
func (m *MocktelebotContext) DeleteAfter(d time.Duration) *time.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAfter", d)
	ret0, _ := ret[0].(*time.Timer)
	return ret0
}

// DeleteAfter indicates an expected call of DeleteAfter.
func (mr *MocktelebotContextMockRecorder) DeleteAfter(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAfter", reflect.TypeOf((*MocktelebotContext)(nil).DeleteAfter), d)
}

// Edit mocks base method.
func (m *MocktelebotContext) Edit(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Edit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MocktelebotContextMockRecorder) Edit(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MocktelebotContext)(nil).Edit), varargs...)
}

// EditCaption mocks base method.
func (m *MocktelebotContext) EditCaption(caption string, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{caption}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCaption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCaption indicates an expected call of EditCaption.
func (mr *MocktelebotContextMockRecorder) EditCaption(caption any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{caption}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCaption", reflect.TypeOf((*MocktelebotContext)(nil).EditCaption), varargs...)
}

// EditOrReply mocks base method.
func (m *MocktelebotContext) EditOrReply(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditOrReply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrReply indicates an expected call of EditOrReply.
func (mr *MocktelebotContextMockRecorder) EditOrReply(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrReply", reflect.TypeOf((*MocktelebotContext)(nil).EditOrReply), varargs...)
}

// EditOrSend mocks base method.
func (m *MocktelebotContext) EditOrSend(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditOrSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrSend indicates an expected call of EditOrSend.
func (mr *MocktelebotContextMockRecorder) EditOrSend(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrSend", reflect.TypeOf((*MocktelebotContext)(nil).EditOrSend), varargs...)
}

// Entities mocks base method.
func (m *MocktelebotContext) Entities() telebot.Entities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entities")
	ret0, _ := ret[0].(telebot.Entities)
	return ret0
}

// Entities indicates an expected call of Entities.
func (mr *MocktelebotContextMockRecorder) Entities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entities", reflect.TypeOf((*MocktelebotContext)(nil).Entities))
}

// Forward mocks base method.
func (m *MocktelebotContext) Forward(msg telebot.Editable, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Forward", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward.
func (mr *MocktelebotContextMockRecorder) Forward(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MocktelebotContext)(nil).Forward), varargs...)
}

// ForwardTo mocks base method.
func (m *MocktelebotContext) ForwardTo(to telebot.Recipient, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{to}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForwardTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardTo indicates an expected call of ForwardTo.
func (mr *MocktelebotContextMockRecorder) ForwardTo(to any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{to}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardTo", reflect.TypeOf((*MocktelebotContext)(nil).ForwardTo), varargs...)
}

// Get mocks base method.
func (m *MocktelebotContext) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MocktelebotContextMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocktelebotContext)(nil).Get), key)
}

// InlineResult mocks base method.
func (m *MocktelebotContext) InlineResult() *telebot.InlineResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InlineResult")
	ret0, _ := ret[0].(*telebot.InlineResult)
	return ret0
}

// InlineResult indicates an expected call of InlineResult.
func (mr *MocktelebotContextMockRecorder) InlineResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InlineResult", reflect.TypeOf((*MocktelebotContext)(nil).InlineResult))
}

// Message mocks base method.
func (m *MocktelebotContext) Message() *telebot.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(*telebot.Message)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MocktelebotContextMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MocktelebotContext)(nil).Message))
}

// Migration mocks base method.
func (m *MocktelebotContext) Migration() (int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// Migration indicates an expected call of Migration.
func (mr *MocktelebotContextMockRecorder) Migration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MocktelebotContext)(nil).Migration))
}

// Notify mocks base method.
func (m *MocktelebotContext) Notify(action telebot.ChatAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MocktelebotContextMockRecorder) Notify(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MocktelebotContext)(nil).Notify), action)
}

// Poll mocks base method.
func (m *MocktelebotContext) Poll() *telebot.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll")
	ret0, _ := ret[0].(*telebot.Poll)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MocktelebotContextMockRecorder) Poll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MocktelebotContext)(nil).Poll))
}

// PollAnswer mocks base method.
func (m *MocktelebotContext) PollAnswer() *telebot.PollAnswer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollAnswer")
	ret0, _ := ret[0].(*telebot.PollAnswer)
	return ret0
}

// PollAnswer indicates an expected call of PollAnswer.
func (mr *MocktelebotContextMockRecorder) PollAnswer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollAnswer", reflect.TypeOf((*MocktelebotContext)(nil).PollAnswer))
}

// PreCheckoutQuery mocks base method.
func (m *MocktelebotContext) PreCheckoutQuery() *telebot.PreCheckoutQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCheckoutQuery")
	ret0, _ := ret[0].(*telebot.PreCheckoutQuery)
	return ret0
}

// PreCheckoutQuery indicates an expected call of PreCheckoutQuery.
func (mr *MocktelebotContextMockRecorder) PreCheckoutQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCheckoutQuery", reflect.TypeOf((*MocktelebotContext)(nil).PreCheckoutQuery))
}

// Query mocks base method.
func (m *MocktelebotContext) Query() *telebot.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(*telebot.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MocktelebotContextMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MocktelebotContext)(nil).Query))
}

// Recipient mocks base method.
func (m *MocktelebotContext) Recipient() telebot.Recipient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recipient")
	ret0, _ := ret[0].(telebot.Recipient)
	return ret0
}

// Recipient indicates an expected call of Recipient.
func (mr *MocktelebotContextMockRecorder) Recipient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recipient", reflect.TypeOf((*MocktelebotContext)(nil).Recipient))
}

// Reply mocks base method.
func (m *MocktelebotContext) Reply(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MocktelebotContextMockRecorder) Reply(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MocktelebotContext)(nil).Reply), varargs...)
}

// Respond mocks base method.
func (m *MocktelebotContext) Respond(resp ...*telebot.CallbackResponse) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range resp {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Respond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MocktelebotContextMockRecorder) Respond(resp ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MocktelebotContext)(nil).Respond), resp...)
}

// Send mocks base method.
func (m *MocktelebotContext) Send(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MocktelebotContextMockRecorder) Send(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MocktelebotContext)(nil).Send), varargs...)
}

// SendAlbum mocks base method.
func (m *MocktelebotContext) SendAlbum(a telebot.Album, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{a}
	for _, a_2 := range opts {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "SendAlbum", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAlbum indicates an expected call of SendAlbum.
func (mr *MocktelebotContextMockRecorder) SendAlbum(a any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{a}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlbum", reflect.TypeOf((*MocktelebotContext)(nil).SendAlbum), varargs...)
}

// Sender mocks base method.
func (m *MocktelebotContext) Sender() *telebot.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(*telebot.User)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MocktelebotContextMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MocktelebotContext)(nil).Sender))
}

// Set mocks base method.
func (m *MocktelebotContext) Set(key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val)
}

// Set indicates an expected call of Set.
func (mr *MocktelebotContextMockRecorder) Set(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MocktelebotContext)(nil).Set), key, val)
}

// Ship mocks base method.
func (m *MocktelebotContext) Ship(what ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range what {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ship", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ship indicates an expected call of Ship.
func (mr *MocktelebotContextMockRecorder) Ship(what ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ship", reflect.TypeOf((*MocktelebotContext)(nil).Ship), what...)
}

// ShippingQuery mocks base method.
func (m *MocktelebotContext) ShippingQuery() *telebot.ShippingQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShippingQuery")
	ret0, _ := ret[0].(*telebot.ShippingQuery)
	return ret0
}

// ShippingQuery indicates an expected call of ShippingQuery.
func (mr *MocktelebotContextMockRecorder) ShippingQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShippingQuery", reflect.TypeOf((*MocktelebotContext)(nil).ShippingQuery))
}

// Text mocks base method.
func (m *MocktelebotContext) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MocktelebotContextMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MocktelebotContext)(nil).Text))
}

// Topic mocks base method.
func (m *MocktelebotContext) Topic() *telebot.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(*telebot.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MocktelebotContextMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MocktelebotContext)(nil).Topic))
}

// Update mocks base method.
func (m *MocktelebotContext) Update() telebot.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(telebot.Update)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MocktelebotContextMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocktelebotContext)(nil).Update))
}

// MockfsmContext is a mock of fsmContext interface.
type MockfsmContext struct {
	ctrl     *gomock.Controller
	recorder *MockfsmContextMockRecorder
}

// MockfsmContextMockRecorder is the mock recorder for MockfsmContext.
type MockfsmContextMockRecorder struct {
	mock *MockfsmContext
}

// NewMockfsmContext creates a new mock instance.
func NewMockfsmContext(ctrl *gomock.Controller) *MockfsmContext {
	mock := &MockfsmContext{ctrl: ctrl}
	mock.recorder = &MockfsmContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfsmContext) EXPECT() *MockfsmContextMockRecorder {
	return m.recorder
}

// Bot mocks base method.
func (m *MockfsmContext) Bot() *telebot.Bot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bot")
	ret0, _ := ret[0].(*telebot.Bot)
	return ret0
}

// Bot indicates an expected call of Bot.
func (mr *MockfsmContextMockRecorder) Bot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bot", reflect.TypeOf((*MockfsmContext)(nil).Bot))
}

// Finish mocks base method.
func (m *MockfsmContext) Finish(deleteData bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", deleteData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockfsmContextMockRecorder) Finish(deleteData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockfsmContext)(nil).Finish), deleteData)
}

// Get mocks base method.
func (m *MockfsmContext) Get(key string, to any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockfsmContextMockRecorder) Get(key, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockfsmContext)(nil).Get), key, to)
}

// MustGet mocks base method.
func (m *MockfsmContext) MustGet(key string, to any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustGet", key, to)
}

// MustGet indicates an expected call of MustGet.
func (mr *MockfsmContextMockRecorder) MustGet(key, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockfsmContext)(nil).MustGet), key, to)
}

// Set mocks base method.
func (m *MockfsmContext) Set(state fsm.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockfsmContextMockRecorder) Set(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockfsmContext)(nil).Set), state)
}

// State mocks base method.
func (m *MockfsmContext) State() (fsm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(fsm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockfsmContextMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockfsmContext)(nil).State))
}

// Update mocks base method.
func (m *MockfsmContext) Update(key string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockfsmContextMockRecorder) Update(key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockfsmContext)(nil).Update), key, data)
}

// MockrepoClient is a mock of repoClient interface.
type MockrepoClient struct {
	ctrl     *gomock.Controller
	recorder *MockrepoClientMockRecorder
}

// MockrepoClientMockRecorder is the mock recorder for MockrepoClient.
type MockrepoClientMockRecorder struct {
	mock *MockrepoClient
}

// NewMockrepoClient creates a new mock instance.
func NewMockrepoClient(ctrl *gomock.Controller) *MockrepoClient {
	mock := &MockrepoClient{ctrl: ctrl}
	mock.recorder = &MockrepoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoClient) EXPECT() *MockrepoClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockrepoClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockrepoClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockrepoClient)(nil).Close), ctx)
}

// Interviews mocks base method.
func (m *MockrepoClient) Interviews() models.InterviewsRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interviews")
	ret0, _ := ret[0].(models.InterviewsRepo)
	return ret0
}

// Interviews indicates an expected call of Interviews.
func (mr *MockrepoClientMockRecorder) Interviews() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interviews", reflect.TypeOf((*MockrepoClient)(nil).Interviews))
}

// NewSession mocks base method.
func (m *MockrepoClient) NewSession() (txn.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession")
	ret0, _ := ret[0].(txn.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockrepoClientMockRecorder) NewSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockrepoClient)(nil).NewSession))
}

// Users mocks base method.
func (m *MockrepoClient) Users() models.UsersRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(models.UsersRepo)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockrepoClientMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockrepoClient)(nil).Users))
}

// MockinterviewsApi is a mock of interviewsApi interface.
type MockinterviewsApi struct {
	ctrl     *gomock.Controller
	recorder *MockinterviewsApiMockRecorder
}

// MockinterviewsApiMockRecorder is the mock recorder for MockinterviewsApi.
type MockinterviewsApiMockRecorder struct {
	mock *MockinterviewsApi
}

// NewMockinterviewsApi creates a new mock instance.
func NewMockinterviewsApi(ctrl *gomock.Controller) *MockinterviewsApi {
	mock := &MockinterviewsApi{ctrl: ctrl}
	mock.recorder = &MockinterviewsApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinterviewsApi) EXPECT() *MockinterviewsApiMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockinterviewsApi) Cancel(ctx context.Context, id string, side models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id, side)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockinterviewsApiMockRecorder) Cancel(ctx, id, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockinterviewsApi)(nil).Cancel), ctx, id, side)
}

// Create mocks base method.
func (m *MockinterviewsApi) Create(ctx context.Context, vacancy, candidateTg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, vacancy, candidateTg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockinterviewsApiMockRecorder) Create(ctx, vacancy, candidateTg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockinterviewsApi)(nil).Create), ctx, vacancy, candidateTg)
}

// Delete mocks base method.
func (m *MockinterviewsApi) Delete(ctx context.Context, id string) (*models.Interview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*models.Interview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockinterviewsApiMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockinterviewsApi)(nil).Delete), ctx, id)
}

// Done mocks base method.
func (m *MockinterviewsApi) Done(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockinterviewsApiMockRecorder) Done(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockinterviewsApi)(nil).Done), ctx, id)
}

// Find mocks base method.
func (m *MockinterviewsApi) Find(ctx context.Context, id string) (*models.Interview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*models.Interview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockinterviewsApiMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockinterviewsApi)(nil).Find), ctx, id)
}

// FindByUser mocks base method.
func (m *MockinterviewsApi) FindByUser(ctx context.Context, username string) ([]models.Interview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", ctx, username)
	ret0, _ := ret[0].([]models.Interview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockinterviewsApiMockRecorder) FindByUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockinterviewsApi)(nil).FindByUser), ctx, username)
}

// FixTg mocks base method.
func (m *MockinterviewsApi) FixTg(ctx context.Context, username string, tg int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixTg", ctx, username, tg)
	ret0, _ := ret[0].(error)
	return ret0
}

// FixTg indicates an expected call of FixTg.
func (mr *MockinterviewsApiMockRecorder) FixTg(ctx, username, tg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixTg", reflect.TypeOf((*MockinterviewsApi)(nil).FixTg), ctx, username, tg)
}

// GetUpcoming mocks base method.
func (m *MockinterviewsApi) GetUpcoming(ctx context.Context, lastNotifyBefore, startsBefore int64) ([]models.Interview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcoming", ctx, lastNotifyBefore, startsBefore)
	ret0, _ := ret[0].([]models.Interview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcoming indicates an expected call of GetUpcoming.
func (mr *MockinterviewsApiMockRecorder) GetUpcoming(ctx, lastNotifyBefore, startsBefore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcoming", reflect.TypeOf((*MockinterviewsApi)(nil).GetUpcoming), ctx, lastNotifyBefore, startsBefore)
}

// Notify mocks base method.
func (m *MockinterviewsApi) Notify(ctx context.Context, id string, at int64, notified [2]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, id, at, notified)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockinterviewsApiMockRecorder) Notify(ctx, id, at, notified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockinterviewsApi)(nil).Notify), ctx, id, at, notified)
}

// Schedule mocks base method.
func (m *MockinterviewsApi) Schedule(ctx context.Context, id string, candidate, interviewer models.User, slot models.Meeting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, id, candidate, interviewer, slot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockinterviewsApiMockRecorder) Schedule(ctx, id, candidate, interviewer, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockinterviewsApi)(nil).Schedule), ctx, id, candidate, interviewer, slot)
}

// Update mocks base method.
func (m *MockinterviewsApi) Update(ctx context.Context, id string, vacancy, candidate *string, data *[]byte, zoom *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, vacancy, candidate, data, zoom)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockinterviewsApiMockRecorder) Update(ctx, id, vacancy, candidate, data, zoom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockinterviewsApi)(nil).Update), ctx, id, vacancy, candidate, data, zoom)
}

// MockusersApi is a mock of usersApi interface.
type MockusersApi struct {
	ctrl     *gomock.Controller
	recorder *MockusersApiMockRecorder
}

// MockusersApiMockRecorder is the mock recorder for MockusersApi.
type MockusersApiMockRecorder struct {
	mock *MockusersApi
}

// NewMockusersApi creates a new mock instance.
func NewMockusersApi(ctrl *gomock.Controller) *MockusersApi {
	mock := &MockusersApi{ctrl: ctrl}
	mock.recorder = &MockusersApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersApi) EXPECT() *MockusersApiMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockusersApi) Get(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockusersApiMockRecorder) Get(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockusersApi)(nil).Get), ctx, username)
}

// Match mocks base method.
func (m *MockusersApi) Match(ctx context.Context, targetInterval [2]int64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, targetInterval)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockusersApiMockRecorder) Match(ctx, targetInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockusersApi)(nil).Match), ctx, targetInterval)
}

// Update mocks base method.
func (m *MockusersApi) Update(ctx context.Context, username string, telegramID *int64, category *models.UserCategory, intGrade *int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, username, telegramID, category, intGrade)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockusersApiMockRecorder) Update(ctx, username, telegramID, category, intGrade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockusersApi)(nil).Update), ctx, username, telegramID, category, intGrade)
}

// UpdateMeetings mocks base method.
func (m *MockusersApi) UpdateMeetings(ctx context.Context, username string, meets []models.Meeting) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeetings", ctx, username, meets)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeetings indicates an expected call of UpdateMeetings.
func (mr *MockusersApiMockRecorder) UpdateMeetings(ctx, username, meets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeetings", reflect.TypeOf((*MockusersApi)(nil).UpdateMeetings), ctx, username, meets)
}

// Upsert mocks base method.
func (m *MockusersApi) Upsert(ctx context.Context, username string, telegramID *int64, category *models.UserCategory, intGrade *int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, username, telegramID, category, intGrade)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockusersApiMockRecorder) Upsert(ctx, username, telegramID, category, intGrade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockusersApi)(nil).Upsert), ctx, username, telegramID, category, intGrade)
}

// MockloggerImpl is a mock of loggerImpl interface.
type MockloggerImpl struct {
	ctrl     *gomock.Controller
	recorder *MockloggerImplMockRecorder
}

// MockloggerImplMockRecorder is the mock recorder for MockloggerImpl.
type MockloggerImplMockRecorder struct {
	mock *MockloggerImpl
}

// NewMockloggerImpl creates a new mock instance.
func NewMockloggerImpl(ctrl *gomock.Controller) *MockloggerImpl {
	mock := &MockloggerImpl{ctrl: ctrl}
	mock.recorder = &MockloggerImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloggerImpl) EXPECT() *MockloggerImplMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockloggerImpl) Debug(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", err)
}

// Debug indicates an expected call of Debug.
func (mr *MockloggerImplMockRecorder) Debug(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockloggerImpl)(nil).Debug), err)
}

// Debugf mocks base method.
func (m *MockloggerImpl) Debugf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockloggerImplMockRecorder) Debugf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockloggerImpl)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockloggerImpl) Error(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockloggerImplMockRecorder) Error(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockloggerImpl)(nil).Error), err)
}

// Errorf mocks base method.
func (m *MockloggerImpl) Errorf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockloggerImplMockRecorder) Errorf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockloggerImpl)(nil).Errorf), varargs...)
}

// Info mocks base method.
func (m *MockloggerImpl) Info(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", err)
}

// Info indicates an expected call of Info.
func (mr *MockloggerImplMockRecorder) Info(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockloggerImpl)(nil).Info), err)
}

// Infof mocks base method.
func (m *MockloggerImpl) Infof(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockloggerImplMockRecorder) Infof(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockloggerImpl)(nil).Infof), varargs...)
}

// Panic mocks base method.
func (m *MockloggerImpl) Panic(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", err)
}

// Panic indicates an expected call of Panic.
func (mr *MockloggerImplMockRecorder) Panic(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockloggerImpl)(nil).Panic), err)
}

// Panicf mocks base method.
func (m *MockloggerImpl) Panicf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf.
func (mr *MockloggerImplMockRecorder) Panicf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockloggerImpl)(nil).Panicf), varargs...)
}

// Warn mocks base method.
func (m *MockloggerImpl) Warn(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", err)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerImplMockRecorder) Warn(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockloggerImpl)(nil).Warn), err)
}

// Warnf mocks base method.
func (m *MockloggerImpl) Warnf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockloggerImplMockRecorder) Warnf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockloggerImpl)(nil).Warnf), varargs...)
}

// With mocks base method.
func (m *MockloggerImpl) With(label string) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", label)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockloggerImplMockRecorder) With(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockloggerImpl)(nil).With), label)
}

// Mockpubsub is a mock of pubsub interface.
type Mockpubsub struct {
	ctrl     *gomock.Controller
	recorder *MockpubsubMockRecorder
}

// MockpubsubMockRecorder is the mock recorder for Mockpubsub.
type MockpubsubMockRecorder struct {
	mock *Mockpubsub
}

// NewMockpubsub creates a new mock instance.
func NewMockpubsub(ctrl *gomock.Controller) *Mockpubsub {
	mock := &Mockpubsub{ctrl: ctrl}
	mock.recorder = &MockpubsubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpubsub) EXPECT() *MockpubsubMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *Mockpubsub) Pull(channel string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", channel)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockpubsubMockRecorder) Pull(channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*Mockpubsub)(nil).Pull), channel)
}

// MockTimeProvider is a mock of TimeProvider interface.
type MockTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTimeProviderMockRecorder
}

// MockTimeProviderMockRecorder is the mock recorder for MockTimeProvider.
type MockTimeProviderMockRecorder struct {
	mock *MockTimeProvider
}

// NewMockTimeProvider creates a new mock instance.
func NewMockTimeProvider(ctrl *gomock.Controller) *MockTimeProvider {
	mock := &MockTimeProvider{ctrl: ctrl}
	mock.recorder = &MockTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeProvider) EXPECT() *MockTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeProvider) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeProvider)(nil).Now))
}

// NowMillis mocks base method.
func (m *MockTimeProvider) NowMillis() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowMillis")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NowMillis indicates an expected call of NowMillis.
func (mr *MockTimeProviderMockRecorder) NowMillis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowMillis", reflect.TypeOf((*MockTimeProvider)(nil).NowMillis))
}

// UTCDiff mocks base method.
func (m *MockTimeProvider) UTCDiff() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTCDiff")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UTCDiff indicates an expected call of UTCDiff.
func (mr *MockTimeProviderMockRecorder) UTCDiff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTCDiff", reflect.TypeOf((*MockTimeProvider)(nil).UTCDiff))
}

// ZoneName mocks base method.
func (m *MockTimeProvider) ZoneName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZoneName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ZoneName indicates an expected call of ZoneName.
func (mr *MockTimeProviderMockRecorder) ZoneName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneName", reflect.TypeOf((*MockTimeProvider)(nil).ZoneName))
}
